# Code Generated by Sidekick is for learning and experimentation purposes only.
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: {{ include "wellsfargo.fullname" . }}
# spec:
#   replicas: {{ .Values.replicaCount }}
#   strategy:
#     type: RollingUpdate
#     rollingUpdate:
#       maxSurge: 1
#       maxUnavailable: 0
#   selector:
#     matchLabels:
#       app: {{- include "wellsfargo.selectorLabels" . | nindent 6 }}
#   template:
#     metadata:
#       labels:
#         app: {{- include "wellsfargo.selectorLabels" . | nindent 8 }}
#     spec:
#       imagePullSecrets:
#         {{- toYaml .Values.imagePullSecrets | nindent 8 }}
#       containers:
#         - name: {{ .Chart.Name }}
#           image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
#           imagePullPolicy: {{ .Values.image.pullPolicy }}
#           ports:
#             - containerPort: 8080
      # initContainers:
      #   - name: run-sql-script
      #     image: mysql:8.0
      #     # command: ["sh", "-c", "mysql -h $DB_HOST -u$DB_USER -p$DB_PASS $DB_NAME < /sql/init.sql"]
      #     command:
      #       - sh
      #       - -c
      #       - |
      #         echo "=== Starting DB initialization ==="
      #         echo "=== Using DB: $DB_NAME at $DB_HOST:$DB_PORT ==="
      #         mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASS $DB_NAME < /sql/init.sql
      #         status=$?
      #         if [ $status -eq 0 ]; then
      #           echo "=== DB initialization completed successfully ==="
      #         else
      #           echo "=== DB initialization FAILED with exit code $status ==="
      #           exit $status
      #         fi
      #     env:
      #       - name: DB_HOST
      #         value: {{ .Values.db.host }}      # <-- Set to your existing DB host
      #       - name: DB_PORT
      #         value: "3309"                     # <-- Set to your existing DB port
      #       - name: DB_USER
      #         value: {{ .Values.db.user }}
      #       - name: DB_PASS
      #         value: {{ .Values.db.password }}
      #       - name: DB_NAME
      #         value: {{ .Values.db.name }}
      #     volumeMounts:
      #       - name: sql-script
      #         mountPath: /sql
      # volumes:
      #   - name: sql-script
      #     configMap:
      #       name: {{ .Values.sqlConfigMap }}

